// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package com.example.test.api

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import java.lang.reflect.Constructor
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.emptySet
import kotlin.jvm.Volatile
import kotlin.text.buildString

public class DrinkJsonAdapter(
  moshi: Moshi
) : JsonAdapter<Drink>() {
  private val options: JsonReader.Options = JsonReader.Options.of("idDrink", "strAlcoholic",
      "strDrink", "strDrinkThumb", "strInstructions")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "idDrink")

  @Volatile
  private var constructorRef: Constructor<Drink>? = null

  public override fun toString(): String = buildString(27) {
      append("GeneratedJsonAdapter(").append("Drink").append(')') }

  public override fun fromJson(reader: JsonReader): Drink {
    var idDrink: String? = null
    var strAlcoholic: String? = null
    var strDrink: String? = null
    var strDrinkThumb: String? = null
    var strInstructions: String? = null
    var mask0 = -1
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> {
          idDrink = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("idDrink",
              "idDrink", reader)
          // $mask = $mask and (1 shl 0).inv()
          mask0 = mask0 and 0xfffffffe.toInt()
        }
        1 -> {
          strAlcoholic = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("strAlcoholic",
              "strAlcoholic", reader)
          // $mask = $mask and (1 shl 1).inv()
          mask0 = mask0 and 0xfffffffd.toInt()
        }
        2 -> {
          strDrink = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("strDrink",
              "strDrink", reader)
          // $mask = $mask and (1 shl 2).inv()
          mask0 = mask0 and 0xfffffffb.toInt()
        }
        3 -> {
          strDrinkThumb = stringAdapter.fromJson(reader) ?:
              throw Util.unexpectedNull("strDrinkThumb", "strDrinkThumb", reader)
          // $mask = $mask and (1 shl 3).inv()
          mask0 = mask0 and 0xfffffff7.toInt()
        }
        4 -> {
          strInstructions = stringAdapter.fromJson(reader) ?:
              throw Util.unexpectedNull("strInstructions", "strInstructions", reader)
          // $mask = $mask and (1 shl 4).inv()
          mask0 = mask0 and 0xffffffef.toInt()
        }
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    if (mask0 == 0xffffffe0.toInt()) {
      // All parameters with defaults are set, invoke the constructor directly
      return  Drink(
          idDrink = idDrink as String,
          strAlcoholic = strAlcoholic as String,
          strDrink = strDrink as String,
          strDrinkThumb = strDrinkThumb as String,
          strInstructions = strInstructions as String
      )
    } else {
      // Reflectively invoke the synthetic defaults constructor
      @Suppress("UNCHECKED_CAST")
      val localConstructor: Constructor<Drink> = this.constructorRef ?:
          Drink::class.java.getDeclaredConstructor(String::class.java, String::class.java,
          String::class.java, String::class.java, String::class.java, Int::class.javaPrimitiveType,
          Util.DEFAULT_CONSTRUCTOR_MARKER).also { this.constructorRef = it }
      return localConstructor.newInstance(
          idDrink,
          strAlcoholic,
          strDrink,
          strDrinkThumb,
          strInstructions,
          mask0,
          /* DefaultConstructorMarker */ null
      )
    }
  }

  public override fun toJson(writer: JsonWriter, value_: Drink?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("idDrink")
    stringAdapter.toJson(writer, value_.idDrink)
    writer.name("strAlcoholic")
    stringAdapter.toJson(writer, value_.strAlcoholic)
    writer.name("strDrink")
    stringAdapter.toJson(writer, value_.strDrink)
    writer.name("strDrinkThumb")
    stringAdapter.toJson(writer, value_.strDrinkThumb)
    writer.name("strInstructions")
    stringAdapter.toJson(writer, value_.strInstructions)
    writer.endObject()
  }
}
